{"version":3,"sources":["components/Map.js","App.js","serviceWorker.js","index.js"],"names":["getCentroids","data","features","map","feature","coordinates","x","y","newCoordinates","length","i","centroidX","centroidY","sumXY","geometry","properties","joinData","countObject","editData","prop","index","findIndex","parseInt","code","console","log","count","result","World","React","setData","point","setPoint","setFly","popupInfo","setPopupInfo","a","fetch","response","json","axios","get","then","res","dv","DataSet","View","source","type","countByCity","rows","totalCount","undefined","ciudad","Departaments","find","departament","ciudades","includes","c_digo_dane_del_departamento","npoint","fetchData","coord","pitch","style","zoom","position","top","left","right","bottom","lnglat","name","margin","charAt","toUpperCase","slice","toLowerCase","confirmedCount","key","options","autoFit","color","field","values","shape","opacity","size","parser","scale","active","option","animate","enable","handler","e","args","lngLat","Content","App","padding","span","title","height","window","innerHeight","Boolean","location","hostname","match","ReactDOM","render","document","getElementById","navigator","serviceWorker","ready","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.742d6926.chunk.js","sourcesContent":["import * as React from \"react\";\r\nimport DataSet from \"@antv/data-set\";\r\n\r\nimport axios from \"axios\";\r\nimport {\r\n  LineLayer,\r\n  MapboxScene,\r\n  PolygonLayer,\r\n  PointLayer,\r\n  Control,\r\n  Popup,\r\n  LayerEvent\r\n} from \"@antv/l7-react\";\r\n\r\nimport Departaments from \"../data/city\";\r\n\r\nfunction sumXY(coordinates) {\r\n  /*Coordinates is a array [[X1,Y1], [X2,Y2] ...[xn.yn]]\r\n  0: (2) [-76.30729675220047, 8.619299889431787]\r\n  1: (2) [-76.29810333270866, 8.616399764640406]\r\n  .\r\n  .\r\n  .\r\n*/\r\n  //Averages\r\n  let x = 0;\r\n  let y = 0;\r\n  let newCoordinates = coordinates;\r\n\r\n  if (coordinates.length === 1) {\r\n    newCoordinates = coordinates[0];\r\n  }\r\n  for (let i = 0; i < newCoordinates.length; i++) {\r\n    x += newCoordinates[i][0];\r\n    y += newCoordinates[i][1];\r\n  }\r\n\r\n  return {\r\n    centroidX: x / newCoordinates.length,\r\n    centroidY: y / newCoordinates.length\r\n  };\r\n}\r\nfunction getCentroids(data) {\r\n  data.features.map(feature => {\r\n    const { centroidX, centroidY } = sumXY(feature.geometry.coordinates[0]);\r\n    feature.properties[\"centroid\"] = [centroidX, centroidY];\r\n    feature.properties[\"confirmedCount\"] = 1;\r\n  });\r\n}\r\nfunction joinData(data, countObject) {\r\n  // let features = data.features\r\n  let editData = [...data.features];\r\n  for (let prop in countObject) {\r\n    let index = editData.findIndex(\r\n      feature =>\r\n        parseInt(feature.properties[\"DPTO\"]) ===\r\n        parseInt(countObject[prop].code)\r\n    );\r\n    if (index !== -1) {\r\n      console.log(\"INDEX:\", index);\r\n      console.log(\"A:\", editData[index].properties[\"confirmedCount\"]);\r\n      console.log(\"B:\", parseInt(countObject[prop].count));\r\n      const result =\r\n        parseInt(editData[index].properties[\"confirmedCount\"]) +\r\n        parseInt(countObject[prop].count);\r\n      console.log(\"name\", editData[index].properties[\"NOMBRE_DPT\"]);\r\n      console.log(\"Result\", result);\r\n      editData[index].properties[\"confirmedCount\"] = result;\r\n    }\r\n  }\r\n  console.log(\"EDIT\", editData);\r\n}\r\nconst World = React.memo(function Map() {\r\n  const [data, setData] = React.useState();\r\n  const [point, setPoint] = React.useState();\r\n  const [fly, setFly] = React.useState();\r\n  const [popupInfo, setPopupInfo] = React.useState();\r\n\r\n  //\r\n\r\n  React.useEffect(() => {\r\n    const fetchData = async () => {\r\n      //get data departaments geomap.json\r\n      const response = await fetch(\r\n        \"https://gist.githubusercontent.com/john-guerra/43c7656821069d00dcbc/raw/3aadedf47badbdac823b00dbe259f6bc6d9e1899/colombia.geo.json\"\r\n      );\r\n      let data = await response.json();\r\n      // setPoint(npoint, );\r\n      // setData(data);\r\n      // getCentroids(data);\r\n      axios\r\n        .get(\r\n          \"https://raw.githubusercontent.com/dfuribez/COVID-19-Colombia/master/dataset.csv\"\r\n        )\r\n        .then(res => {\r\n          const dv = new DataSet.View().source(res.data, {\r\n            type: \"csv\"\r\n          });\r\n          let countByCity = {};\r\n          const rows = dv.rows;\r\n          let totalCount = 0;\r\n          for (let i = 0; i < rows.length; i++) {\r\n            if (countByCity[rows[i].ciudad] === undefined) {\r\n              console.log(rows[i].ciudad)\r\n              const code = Departaments.find(departament =>\r\n                departament.ciudades.includes(rows[i].ciudad)\r\n              ).c_digo_dane_del_departamento\r\n              if (code === \"5\") console.log(code);\r\n              countByCity[rows[i].ciudad] = { count: 1, code: code };\r\n            } else {\r\n              const count = countByCity[rows[i].ciudad].count;\r\n              countByCity[rows[i].ciudad].count = count + 1;\r\n            }\r\n            totalCount += 1;\r\n          }\r\n          console.log(\"Total\", totalCount);\r\n          console.log(countByCity);\r\n          getCentroids(data);\r\n          joinData(data, countByCity);\r\n\r\n          const npoint = data.features.map(feature => {\r\n            return feature.properties;\r\n          });\r\n          setPoint(npoint);\r\n          setData(data);\r\n          console.log(\"npoint \", npoint);\r\n\r\n          console.log(\"data:  \", data);\r\n        });\r\n    };\r\n\r\n    fetchData();\r\n    const dataFlyTest = [\r\n      {\r\n        coord: [\r\n          [-75.83552264434908, 7.001176054433129],\r\n          [-74.21105069962759, 4.285993532528952]\r\n        ]\r\n      }\r\n    ];\r\n    setFly(dataFlyTest);\r\n  }, []);\r\n  function showPopup(args) {\r\n    console.log(args);\r\n    args.feature &&\r\n      setPopupInfo({\r\n        lnglat: args.lngLat,\r\n        feature: args.feature\r\n      });\r\n  }\r\n\r\n  return (\r\n    <div>\r\n      <MapboxScene\r\n        map={{\r\n          pitch: 45,\r\n          style: \"dark\",\r\n          zoom: 1\r\n        }}\r\n        style={{\r\n          position: \"absolute\",\r\n          top: 0,\r\n          left: 0,\r\n          right: 0,\r\n          bottom: 0\r\n        }}\r\n      >\r\n        {popupInfo && (\r\n          <Popup lnglat={popupInfo.lnglat}>\r\n            {popupInfo.feature.name}\r\n            <ul\r\n              style={{\r\n                margin: 0\r\n              }}\r\n            >\r\n              <li>\r\n                Departamento:\r\n                <br />{\" \"}\r\n                {popupInfo.feature[\"NOMBRE_DPT\"].charAt(0).toUpperCase() +\r\n                  popupInfo.feature[\"NOMBRE_DPT\"].slice(1).toLowerCase()}\r\n              </li>\r\n              <li>\r\n                Confirmados:\r\n                <br />\r\n                {popupInfo.feature.confirmedCount - 1}\r\n              </li>\r\n            </ul>\r\n          </Popup>\r\n        )}\r\n        {data &&\r\n          point && [\r\n            <PolygonLayer\r\n              key={\"1\"}\r\n              options={{\r\n                autoFit: true\r\n              }}\r\n              source={{\r\n                data\r\n              }}\r\n              color={{\r\n                field: \"DPTO\",\r\n                values: [\r\n                  \"#2E8AE6\",\r\n                  \"#69D1AB\",\r\n                  \"#DAF291\",\r\n                  \"#FFD591\",\r\n                  \"#FF7A45\",\r\n                  \"#CF1D49\"\r\n                ]\r\n              }}\r\n              shape={{\r\n                values: \"fill\"\r\n              }}\r\n              style={{\r\n                opacity: 1\r\n              }}\r\n              // select={{\r\n              //   option: { color: \"#000\" }\r\n              // }}\r\n            />,\r\n            <LineLayer\r\n              key={\"5\"}\r\n              source={{\r\n                data\r\n              }}\r\n              size={{\r\n                values: 0.5\r\n              }}\r\n              color={{\r\n                values: \"#000000\"\r\n              }}\r\n              shape={{\r\n                values: \"line\"\r\n              }}\r\n              style={{\r\n                opacity: 1\r\n              }}\r\n            />,\r\n            //Linefly\r\n            // <LineLayer\r\n            //   key={\"2\"}\r\n            //   source={{\r\n            //     data: fly,\r\n            //     parser: {\r\n            //       type: \"json\",\r\n            //       coordinates: \"coord\"\r\n            //     }\r\n            //   }}\r\n            //   size={{\r\n            //     values: 2\r\n            //   }}\r\n            //   color={{\r\n            //     values: \"#ff6b34\"\r\n            //   }}\r\n            //   shape={{\r\n            //     values: \"arc3d\"\r\n            //   }}\r\n            //   active={{ values: true }}\r\n            //   style={{\r\n            //     opacity: 1\r\n            //   }}\r\n            //   animate={{\r\n            //     interval: 2,\r\n            //     trailLength: 2,\r\n            //     duration: 1\r\n            //   }}\r\n            // />,\r\n            <PointLayer\r\n              key={\"3\"}\r\n              options={{\r\n                autoFit: true\r\n              }}\r\n              source={{\r\n                data: point,\r\n                parser: {\r\n                  type: \"json\",\r\n                  coordinates: \"centroid\"\r\n                }\r\n              }}\r\n              scale={{\r\n                values: {\r\n                  confirmedCount: {\r\n                    type: \"log\"\r\n                  }\r\n                }\r\n              }}\r\n              color={{\r\n                values: \"#b10026\"\r\n              }}\r\n              shape={{\r\n                // values: \"circle\"\r\n                values: \"cylinder\"\r\n                // values: \"circle\"\r\n              }}\r\n              active={{\r\n                option: {\r\n                  color: \"#0c2c84\"\r\n                }\r\n              }}\r\n              size={{\r\n                field: \"confirmedCount\",\r\n                values: (count) => {\r\n                  const height =\r\n                    count - 1 > 100\r\n                      ? 70\r\n                      : count -1 > 50\r\n                      ? 40\r\n                      : count -1 > 35\r\n                      ? 30\r\n                      : count -1 > 20\r\n                      ? 20 \r\n                      : count -1 > 10\r\n                      ? 10\r\n                      : count -1 > 1\r\n                      ? 5\r\n                      : count -1 > 0\r\n                      ? 3\r\n                      : 0;\r\n                  return [4, 4, height];\r\n                },\r\n                // values: [1, 20]\r\n              }}\r\n              animate={{\r\n                enable: true\r\n              }}\r\n              style={{\r\n                opacity: 0.9\r\n              }}\r\n            >\r\n              <LayerEvent type=\"click\" handler={e => showPopup(e)} />\r\n            </PointLayer>\r\n          ]}\r\n        <Control type=\"scale\" />\r\n        <Control type=\"zoom\" />\r\n      </MapboxScene>\r\n    </div>\r\n  );\r\n});\r\n\r\nexport default World;\r\n","import React from \"react\";\nimport { Layout, Row, Col, Card } from \"antd\";\nimport Map from \"./components/Map\";\nconst { Content } = Layout;\nconst App = () => (\n  <Layout>\n    Colombia map\n    <Content style={{ padding: 30 }}>\n      <Row>\n        <Col span={20}>\n          {/* <Map /> */}\n          this is just a test\n        </Col>\n        <Col span={4}>\n          {/* <Map /> */}\n          just a test\n        </Col>\n      </Row>\n      map\n      <Content>\n            <Card size=\"small\" title=\"Contagios\" style={{ height: window.innerHeight }}>\n              <Map />\n            </Card>\n      </Content>\n    </Content>\n  </Layout>\n);\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from \"react\";\nimport ReactDOM from \"react-dom\";\nimport App from \"./App\";\nimport * as serviceWorker from \"./serviceWorker\";\n\nReactDOM.render(<App />, document.getElementById(\"root\"));\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}